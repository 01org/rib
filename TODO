=TODO=

[ADM]
=====

Definite
--------
P2 - convert ADM API to use exceptions for errors
P3 - move test utils into a separate .js file
P3 - add ADM unit tests
P1 - add event type to modelUpdated events

Need Thought
------------
P2 - higher-level validation like id can only start with alpha character
P1 - consider preventing selection outside of active page, or as Xu suggests,
     making selection outside automatically change active page
P2 - consider providing old value in propertyChanged event
P1 - consider moving active page and selection concepts to design node
P2 - consider validating widget registry entries on startup

[Design View]
=============

P1 - When you drag a new item from the palette, it should be displayed in the
     canvas as you drag around. Worst case, maybe insert one and pick it up
     and use it as the draggable?

P2 - Make tools/panels movable to "dock" positions

P2 - Add visual page picker (not a separate dialog).
  * Could be in the toolbar, or a vertical "palette" on the right of
    the screen

P1 - Page delete option someplace

P2 - Make all DOM interactions into a "framework" class with well
  defined APIs for things like:
  * change page
  * select object
  * refresh (or reload) page
  * refresh (or reload) document
  * setting framework specific options (e.g. default transitions)
  * generic message handler (?)
  * delete object
  * move object
  * etc...

- Bugs to fixed:
  * Changing cols and rows for Text Area in properties panel has no effect in the design view.
  * Flip toggle switch widget in the design view cannot be selected.
  * The option widget within a select menu does not show correctly in the design view.
  * Radio button within a control group does not show correctly in the design view.
  * Checkbox within a control group does not show correctly in the design view.

[FileIO]
========

P1 - Implement Export to HTML from File menu

P2 - Implement File view/browser for HTML5 localstorage contents

P2 - Hide "Folder" support in file manager until it's more bug-free

[General]
=========

P2 - Rename template.js to something more appropriate for what it actually
  does, which is handling the embedded design view contents styling and
  behaviors in the framework context as opposed to the GUI Builder JS/CSS
  context

P1 - Separate "controller" and "design view" logic in js/builder.js.  For
  example, split it into two files... and make them more object oriented

P2 - Start saving context for UI states, preferences, current design, etc...

P2 - Menu items should probably have hover state
P3 - Menu items should show we clicked with an active state
P1 - Menu should be dismissed when we click an option (e.g. try File | New)

P2 - Make a "developer" setting somewhere
     - When not in developer mode, hide the "uid=92" text in Properties
     - Turn off "Folder" support in file manager until it's more bug-free

P2 - Text is selectable with dragging, need to disable that somehow
     - e.g. title (filename) text bar
     - or clicking in the page below footer and dragging lets you select stuff

[Palette]
=========

P1 - Convert palette.json and palette.js to be usable for BWidget objects
 Migrate the non-base widgets from widgets.js to palette JSON
  * Base, Design, Page, Header, Footer and maybe Content will remain
    in widgets.js
  * Button, TextInput and others should migrate to a JSON format

P1 - Start adding Tizen "win set" framework widgets to the palette JSON

P1 - Convert existing widgets in palette.json to BWidget formats
  * Flip switch
  * Slider
  * Radio Buttons
  * Checkboxes
  * Select menus
  * Button controlgroup

P2 - Add additional jQM widgets to the palette JSON:
  * Password Input
  * Validated Inputs (number, email, url, telephone, etc.)
  * Search Input

P2 - Convert the palette to a "palette.d" format, where new, custom palettes
  can be added by simply adding new files into that dir.  Needs some high
  level design documentation.

P1 - Visual cleanup, try making the widget boxes constant width, maybe two wide
  with a smaller font so they'll fit? Ask UX team for a better default icon,
  and maybe a set of icons.

[Properties]
============
P2 - Properties pane header text should have some margin from palette
     - Apparently the "jQuery Mobile Widgets" button is covering part of it

P2 - Only display the (uid=92) when in "developer mode" (see [General])

[Serialize]
===========

[Template]
==========

P2 - Create additional templates

P2 - Add a "template picker" at startup and pre-populate the content area with
  selected template

[Widget Registry]
P1 - Provide real UX icons for widgets
P2 - Perhaps display placeholder text in TextInput to guide user
     (e.g. Enter hint text here) -- but only in design canvas
P2 - Very uncommon to actual set TextInput's "value" to a hard-coded initial
     state; we should consider removing the property (for now I've at least
     moved it to the bottom of the TextInput properties)
P3 - Someday we might want to distinguish between the order properties are
     listed in properties pane and the order they are written in codegen
P3 - Could make form elements based on a common FormElement to inherit
     the name attribute
P3 - Whether or not to wrap widget and label with a fieldcontain could be
     an option on the widget

[Code Generation]
P2 - Remove the xmlns stuff from generated code, not needed, right?
P3 - Don't wrap </script> to next line
     - Perhaps these are adjustments we run after beautify?
P3 - Don't wrap /> to next line after <meta> or <input>
     - Also make sure these /> are legit in HTML5

[Code View]
P1 - Should not be editable, at least not any time soon

P2 - Color syntax highlighting would be highly desirable

P2 - [Bug] If we make a change in the property pane, it's not reflected
     in the Code View, apparently until we reload the Code View. So
     probably need to watch for modelUpdated and refresh?

[Preview]
=========
P1 - Respond to page selector and display the selected page

[Outline View]
P2 - Provide outline of ADM tree in a view for easy selection of
     perhaps-invisible containers, etc.
P2 - Update selected widget in outline view to reflect selected widget
     in the model
P2 - Allow selection of a widget in the outline view and reflect this
     in the model
P2 - Support deletion of a widget / subtree from the outline view
